### Video learning source: https://www.youtube.com/watch?v=yZlQJjlqmAs&list=PLzNgKQA0vkdq_zJljPkfXpdhKcJLVLZFS

### Main event ###

# PlayerMovement

private void HorizontalMovement()
    {
        anim.SetBool("isRunning", false);
        if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow))
        {
            if (!facingRight)
            {
                transform.localScale = new Vector3(-transform.localScale.x, transform.localScale.y, transform.localScale.z);
                facingRight = true;
            }
            transform.position += new Vector3(1, 0, 0) * Time.deltaTime * 4;
            anim.SetBool("isRunning", true);
        }
        if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow))
        {
            if (facingRight)
            {
                transform.localScale = new Vector3(-transform.localScale.x, transform.localScale.y, transform.localScale.z);
                facingRight = false;
            }
            transform.position += new Vector3(-1, 0, 0) * Time.deltaTime * 4;
            anim.SetBool("isRunning", true);
        }
    }

private void Jumping()
    {
        if (Input.GetKey(KeyCode.W) || Input.GetKey(KeyCode.UpArrow) || Input.GetKey(KeyCode.Space))
        {
            if (isGrounded)
            {
                rb.AddForce(new Vector2(0, 350));
                isGrounded = false;
                anim.SetBool("isJumping", true);
            }
            //double jump
            if (!isGrounded && rb.velocity.y < 0 && !isDoubleJumping)
            {
                rb.velocity = new Vector2(rb.velocity.x, 0);
                rb.AddForce(new Vector2(0, 350));
                isDoubleJumping = true;
                anim.SetBool("isDoubleJumping", true);
            }
        }
        //after jump to the highest point
        if (rb.velocity.y < 0)
        {
            anim.SetBool("isJumping", false);
            anim.SetBool("isFalling", true);
        }
    }

private void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.CompareTag("Ground"))
        {
            isGrounded = true;
            isDoubleJumping = false;
            anim.SetBool("isFalling", false);
        }
    }

# Collect Item

if (collision.gameObject.CompareTag("Gem"))
        {
            score += 1000;
            audioSource.Play();
            collision.gameObject.GetComponent<ItemScript>().SetCollectTrigger();
        }

# Being Hitted Then Knockback

if (collision.gameObject.CompareTag("BearLeft") || collision.gameObject.CompareTag("BearRight"))
        {
            health -= 10;
            if (health <= 0)
            {
                health = 0;
            }
            //knockback
            if (transform.position.x < collision.gameObject.transform.position.x)
            {
                rb.AddForce(new Vector2(-100, 100));
            }
            anim.SetTrigger("Hit");
        }

# Kill Bear

if (collision.gameObject.CompareTag("BearTop"))
        {
            score += 5000;
            if (health < 100) health += 10;
            collision.gameObject.GetComponentInParent<BearScript>().SetBearDead();
        }

# Teleport Player To Game World

public void Teleport()
    {
        if (houseDoor != null)
        {
            transform.position = houseDoor.GetComponent<TeleportScript>().GetTarget().position;
        }
        tutorialScreen.SetActive(false);
        camera.GetComponent<CameraScript>().startX = -18.6f;
        camera.GetComponent<CameraScript>().startY = 13.4f;
        camera.GetComponent<CameraScript>().endX = 63.2f;
        camera.GetComponent<CameraScript>().endY = 53.3f;
        anim.SetBool("isDisappear", false);
    }

# Death And Respawn

public void Respawn()
    {
        if (isDead)
        {
            transform.position = new Vector3(saveX, saveY, transform.position.z);
            anim.SetBool("isDisappear", false);
            health = 100;
            score -= 1000;
        }
    }

# Save Score To Local XML File

public void SaveScore(){
        var score = player.GetComponent<PlayerScript>().score;
        var name = nameInput.text;
        if(name.Length == 0) return;
        List<UserScore> scores = UserScore.GetScores();
        scores.Add(new UserScore(name, score));
        UserScore.SaveScores(scores);
        UnityEngine.SceneManagement.SceneManager.LoadScene("MainMenu");
    }

public static void SaveScores(List<UserScore> scores){
        try
        {
            using FileStream file = File.Open("scores.xml", FileMode.Create);
            file.SetLength(0);
            var xs = new XmlSerializer(typeof(List<UserScore>));
            xs.Serialize(file, scores);
        }catch(FileNotFoundException ex)
        {
            using FileStream file = File.Create("scores.xml");
            file.SetLength(0);
            var xs = new XmlSerializer(typeof(List<UserScore>));
            xs.Serialize(file, scores);
        }
    }

# Load Score From Local

public static List<UserScore> GetScores()
    {
        try
        {
            using FileStream file = File.Open("scores.xml", FileMode.Open);
            var xs = new XmlSerializer(typeof(List<UserScore>));
            return (List<UserScore>)xs.Deserialize(file);
        }
        catch
        {
            return new List<UserScore>();
        }
    }

# Start Game And Quit Game

public void PlayGame()
    {
        SceneManager.LoadScene("Level_0");
    }

public void QuitGame()
    {
        Application.Quit();
    }

# Spawn Bear At Defined position

private void SpawnBear()
    {
        foreach (var bearPos in bearPosition)
        {
            GameObject bear = Instantiate(Resources.Load("Prefabs/Bear"), new Vector3(bearPos.posX, bearPos.posY, 0), Quaternion.identity) as GameObject;
            bear.GetComponent<BearScript>().startX = bearPos.posX - 10;
            bear.GetComponent<BearScript>().endX = bearPos.posX + 10;
            bear.GetComponent<BearScript>().Player = player;
        }
    }

# Display WinUI When Touch EndPoint

public void DisplayUI()
    {
        endMenu.SetActive(true);
        defaultUI.SetActive(false);
    }

# Camera Follow Player

void Update()
    {   
        var playerX = player.transform.position.x;
        var playerY = player.transform.position.y;
        var cameraX = transform.position.x;
        var cameraY = transform.position.y;
        if (playerX > startX && playerX < endX)
        {
            cameraX = playerX;
        }
        else
        {
            if (playerX <= startX)
            {
                cameraX = startX;
            }
            if (playerX >= endX)
            {
                cameraX = endX;
            }
        }
        if (playerY > startY && playerY < endY)
        {
            cameraY = playerY;
        }
        else
        {
            if (playerY <= startY)
            {
                cameraY = startY;
            }
            if (playerY >= endY)
            {
                cameraY = endY;
            }
        }
        transform.position = new Vector3(cameraX, cameraY, transform.position.z);
    }

# Bear Horizontal Movement

private void Movement()
    {
        if (isAlive)
        {
            var bearPosition = transform.position.x;
            if (bearPosition < startX)
            {
                facingRight = true;
            }
            if (bearPosition > endX)
            {
                facingRight = false;
            }
            if (!facingRight)
            {
                transform.localScale = new Vector3(-1, 1, 1);
                transform.position += new Vector3(-1, 0, 0) * Time.deltaTime * 1.5f;
            }
            else
            {
                transform.localScale = new Vector3(1, 1, 1);
                transform.position += new Vector3(1, 0, 0) * Time.deltaTime * 1.5f;
            }
        }
    }

# Bear Chase Player When Player Go In Bear Movement Range

private void TracePlayer()
    {
        if (Player != null)
        {
            var playerX = Player.transform.position.x;
            if (playerX >= startX && playerX <= endX)
            {
                if (playerX > transform.position.x)
                {
                    facingRight = true;
                }
                if (playerX < transform.position.x)
                {
                    facingRight = false;
                }
            }
        }
    }

# Bear Being Killed

public void DestroyBear()
    {
        Destroy(gameObject);
    }

public void SetBearDead()
    {
        isAlive = false;
        GetComponent<Animator>().SetTrigger("Dead");
    }